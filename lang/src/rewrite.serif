import * from "./InternalNode.serif";
import convert from "./convert.serif";
import desugar from "./desugar.serif";
import globals from "./globals.serif";
import Prelude from "./prelude.serif";

export default rewriteModule;

preludeNames = Set.new $ globalThis.Object.keys Prelude;

removeUnreferencedPreludeFunctions module = (
  let {declared, referenced} = vars module,
      unreferenced = reject (referenced has) declared,
      statements = reject (\case [Var _ (Identifier name) _ -> unreferenced has name && preludeNames has name, _ -> false]) module.statements
  in  if statements.length == module.statements.length
      then module
      else removeUnreferencedPreludeFunctions $ Module module.imports module.exports statements
);

rewriteModule module = {
  -- desugar first to simplify subsequent steps
  module' = convert $ desugar module;
  -- create renaming function based on variable and function declarations
  rename = reduce (\rename -> \case [Var _ pattern _ -> updateRenamerFromPattern rename pattern, _ -> rename]) id module'.statements;
  -- wrap renaming function based on import declarations
  rename' = reduce (\rename -> \case [
    ImportSpecifier (Identifier imported) (Identifier local) -> \name -> if name == imported then local else rename name,
    ImportNamespaceSpecifier local -> updateRenamerFromPattern rename local,
    ImportDefaultSpecifier   local -> updateRenamerFromPattern rename local,
  ]) rename $ module'.imports >>= (.specifiers);
  -- rename identifiers
  module'' = renameIdentifiers rename' module';
  -- insert prelude
  prelude = \case [[name, value] -> Var "const" (Identifier name) value] <$> globalThis.Object.entries Prelude;
  module''' = Module module''.imports module''.exports $ prelude <> module''.statements;
  -- remove unreferenced prelude functions
  module'''' = removeUnreferencedPreludeFunctions module''';
  {declared, referenced} = vars module'''';
  unreferenced = reject (referenced has) declared;
  undeclared = referenced & reject (declared has);
  ignored = Set.new [
    "Deno",
    "DivisionByZero",
    "import",
    "console",
    "fetch",
    "window",
  ];
  undeclared' = (
    undeclared
    & reject (globals has)
    & reject (ignored has)
  );
  if unreferenced.size > 0 then (unreferenced & globalThis.Array.from & joinWith ", " & concat "unreferenced: " & console.error) else undefined;
  if undeclared'.size  > 0 then (undeclared'  & globalThis.Array.from & joinWith ", " & concat "undeclared: "   & console.error) else undefined;
  return module'''';
};

updateRenamerFromPattern rename pattern = case pattern of [
  Identifier name    -> if preludeNames has name then \s -> if s == name then "$" + s else rename s else rename,
  Property key value -> updateRenamerFromPattern rename value,
];

renameIdentifiers rename node = case node of [
  Identifier name -> Identifier $ rename name,
  ImportSpecifier imported local -> ImportSpecifier imported (renameIdentifiers rename local),
  ExportSpecifier local exported -> ExportSpecifier (renameIdentifiers rename local) exported,

  Array elements -> Array (renameIdentifiers rename <$> elements),
  ArrowFunctionExpression parameters body -> ArrowFunctionExpression (renameIdentifiers rename <$> parameters) (renameIdentifiers rename body),
  Call callee arguments -> Call (renameIdentifiers rename callee) (renameIdentifiers rename <$> arguments),
  ConditionalExpression predicate consequent alternative -> ConditionalExpression (renameIdentifiers rename predicate) (renameIdentifiers rename consequent) (renameIdentifiers rename alternative),
  ExportDefaultDeclaration declaration -> ExportDefaultDeclaration (renameIdentifiers rename declaration),
  ExportNamedDeclaration specifiers -> ExportNamedDeclaration (renameIdentifiers rename <$> specifiers),
  Expression expression -> Expression (renameIdentifiers rename expression),
  ImportDeclaration source specifiers -> ImportDeclaration source (renameIdentifiers rename <$> specifiers),
  ImportDefaultSpecifier local -> ImportDefaultSpecifier (renameIdentifiers rename local),
  ImportNamespaceSpecifier local -> ImportNamespaceSpecifier (renameIdentifiers rename local),
  Infix operator left right -> Infix operator (renameIdentifiers rename left) (renameIdentifiers rename right),
  Member object property -> Member (renameIdentifiers rename object) (renameIdentifiers rename property),
  Module imports exports statements -> Module (renameIdentifiers rename <$> imports) (renameIdentifiers rename <$> exports) (renameIdentifiers rename <$> statements),
  Object properties -> Object (renameIdentifiers rename <$> properties),
  Prefix operator operand -> Prefix operator (renameIdentifiers rename operand),
  Property key value -> Property (renameIdentifiers rename key) (renameIdentifiers rename value),
  Spread argument -> Spread (renameIdentifiers rename argument),
  Var kind pattern expression -> Var kind (renameIdentifiers rename pattern) (renameIdentifiers rename expression),
  node -> node,
];
