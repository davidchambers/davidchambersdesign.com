import os from "node:os";
import repl from "node:repl";
import vm from "node:vm";

import {generate} from "astring";
import {attemptP, fork, promise} from "fluture";

import * as serif from "./index.serif";
import * as path from "./path.serif";
import rewrite from "./rewrite.serif";


evaluateModule source = {
  context = vm.createContext global;
  module = apply [vm.SourceTextModule, [source, {context,}]] Reflect.construct;
  chain (_ => map (_ => module.namespace.default)
                  (attemptP (() => .evaluate [] module)))
        (attemptP (() => .link [
                     (specifier, referencingModule) => {
                       promise (map (entries => {
                                       module = apply [vm.SyntheticModule, [
                                         {[name] => name} <$> entries,
                                         () => .forEach [flip {.setExport} module] entries,
                                         {identifier: specifier, context: referencingModule.context},
                                       ]] Reflect.construct;
                                       module
                                     })
                                    (Object.entries <$> attemptP (() => import (specifier))))
                     },
                   ] module))
};

read serifSource = {
  serif.parse "[repl]" `export default ${serifSource};` >>= serifAst => {
    serif.trans (rewrite serifAst) (_importPath => []) >>= jsAst => {
      evaluateModule $ apply [jsAst, {}] generate
    }
  }
};

print x = {
  switch apply [Object.prototype.toString, x, []] Reflect.apply
  when "[object Null]",
       "[object Undefined]",
       "[object Boolean]"
  then `\x1B[35m${x}\x1B[0m`
  when "[object Number]"
  then `\x1B[33m${x}\x1B[0m`
  when "[object String]"
  then `\x1B[32m${JSON.stringify x}\x1B[0m`
  when "[object Symbol]"
  then `Symbol.for ${print $ Symbol.keyFor x}`
  when "[object Date]"
  then `apply [Date, [${print $ Number x}]] Reflect.construct`
  when "[object RegExp]"
  then if x.flags is "" then `RegExp ${print x.source}` else `apply [${print x.source}, ${print x.flags}] RegExp`
  when "[object Set]"
  then `apply [Set, [${print $ Array.from x}]] Reflect.construct`
  when "[object Map]"
  then `apply [Map, [${print $ Array.from x}]] Reflect.construct`
  when "[object Array]"
  then `[${.join [", "] $ print <$> x}]`
  when "[object Object]"
  then `{${.join [", "] $ map {k => `[${print k}]: ${print x[k]}`} $ Reflect.ownKeys x}}`
  else `${x}`
};

server = repl.start {
  prompt: ">>> ",
  eval: (code, _context, _filename, callback) => {
    fork (err => {
            console.error err;
            console.log "";
            .displayPrompt [false] server
          })
         (result => {
            apply [null, result] callback
          })
         (read code)
  },
  writer: value => print value + "\n",
};

.setupHistory [
  path.join [apply [] os.homedir, ".serif-repl-history"],
  error => undefined
] server;
