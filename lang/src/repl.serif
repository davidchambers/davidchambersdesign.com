import {attempt, fork, resolve} from "fluture";
import {generate} from "astring";

import * from "./InternalNode.serif";
import codegen from "./codegen.serif";
import * as grammar from "./grammar.js";
import rewrite from "./rewrite.serif";

#0  = "\x1B[0m";
#1  = "\x1B[1m";
#7  = "\x1B[7m";
#22 = "\x1B[22m";
#27 = "\x1B[27m";
#32 = "\x1B[32m";
#33 = "\x1B[33m";
#35 = "\x1B[35m";

print x = case globalThis.Object.prototype.toString.call x of [
  "[object Null]"      -> #35 + x + #0,
  "[object Undefined]" -> #35 + x + #0,
  "[object Boolean]"   -> #35 + x + #0,
  "[object Number]"    -> #33 + x + #0,
  "[object String]"    -> #32 + JSON.stringify x + #0,
  "[object Symbol]"    -> "Symbol.for " + (print $ Symbol.keyFor x),
  "[object Date]"      -> "Date.new " + (print $ Number x),
  "[object RegExp]"    -> if x.flags == "" then "RegExp " + (print x.source) else "RegExp (" + (print x.source) + ", " + (print x.flags) + ")",
  "[object Set]"       -> "Set.new " + (print $ globalThis.Array.from x),
  "[object Map]"       -> "Map.new " + (print $ globalThis.Array.from x),
  "[object Array]"     -> "[" + (joinWith ", " $ print <$> x) + "]",
  "[object Object]"    -> "{" + (joinWith ", " $ map (\k -> "[" + (print k) + "]: " + (print x[k])) $ Reflect.ownKeys x) + "}",
  x                    -> String x,
];

processInput serifSourceText = do {
  serifAst <- attempt \() -> grammar.parse ("export default " <> serifSourceText <> ";", {grammarSource: "[repl]"});
  serifAst = rewrite serifAst;
  esAst = case serifAst of [
    Module _ [ExportDefaultDeclaration declaration] statements -> (
      codegen $ Block [...statements, Expression declaration]
    )
  ];
  esSourceText = generate esAst;
  console.error esSourceText;
  esResult <- attempt \() -> eval esSourceText;
  resolve $ print esResult
};

repl _ = {
  input = window.prompt "\n>>>";
  case trim input of [
    ":exit" -> { console.log ""; Deno.exit (); },
    ":quit" -> { console.log ""; Deno.exit (); },
    _       -> { fork (repl . console.error) (repl . console.log) (processInput input); }
  ];
};
console.log $ #7 <> " Serif REPL " <> #27 <> " " <> #1 <> ":quit" <> #22 <> " to exit";
repl 8;
