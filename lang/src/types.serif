export {
  NullLiteral,
  BooleanLiteral,
  NumberLiteral,
  StringLiteral,
  TemplateElement,
  TemplateLiteral,
  MetaProperty,
  MemberExpression,
  IdentifierPlaceholder,
  Identifier,
  SpreadElement,
  ArrayExpression,
  Property,
  ObjectExpression,
  ArrayPattern,
  Elision,
  ObjectPattern,
  RestElement,
  ArrowFunctionExpression,
  PropertyAccessor,
  BlockExpression,
  UnaryExpression,
  CompositionExpression,
  BinaryExpression,
  MapExpression,
  BindExpression,
  LogicalExpression,
  ConditionalExpression,
  SwitchExpression,
  SwitchCase,
  PipeExpression,
  CallExpression,
  ImportExpression,
  ImportDeclaration,
  ImportEverythingDeclaration,
  ImportDefaultSpecifier,
  ImportSpecifier,
  ImportNamespaceSpecifier,
  ExportNamedDeclaration,
  ExportDefaultDeclaration,
  VariableDeclaration,
  FunctionDeclaration,
  ExpressionStatement,
  Module,
};

NullLiteral = {
  type: "NullLiteral",
};

BooleanLiteral value = {
  type: "BooleanLiteral",
  value: value,
};

NumberLiteral value = {
  type: "NumberLiteral",
  value: value,
};

StringLiteral value = {
  type: "StringLiteral",
  value: value,
};

TemplateElement tail raw = {
  type: "TemplateElement",
  tail: tail,
  raw: raw,
};

TemplateLiteral quasis expressions = {
  type: "TemplateLiteral",
  quasis: quasis,
  expressions: expressions,
};

MetaProperty meta property = {
  type: "MetaProperty",
  meta: meta,
  property: property,
};

MemberExpression object property = {
  type: "MemberExpression",
  object: object,
  property: property,
};

IdentifierPlaceholder desiredName = {
  type: "IdentifierPlaceholder",
  desiredName: desiredName,
};

Identifier name = {
  type: "Identifier",
  name: name,
};

SpreadElement argument = {
  type: "SpreadElement",
  argument: argument,
};

ArrayExpression elements = {
  type: "ArrayExpression",
  elements: elements,
};

Property key value = {
  type: "Property",
  key: key,
  value: value,
};

ObjectExpression properties = {
  type: "ObjectExpression",
  properties: properties,
};

ArrayPattern elements = {
  type: "ArrayPattern",
  elements: elements,
};

Elision = {
  type: "Elision",
};

ObjectPattern properties = {
  type: "ObjectPattern",
  properties: properties,
};

RestElement argument = {
  type: "RestElement",
  argument: argument,
};

ArrowFunctionExpression parameters body = {
  type: "ArrowFunctionExpression",
  parameters: parameters,
  body: body,
};

PropertyAccessor identifier = {
  type: "PropertyAccessor",
  identifier: identifier,
};

BlockExpression statements = {
  type: "BlockExpression",
  statements: statements,
};

UnaryExpression operator argument = {
  type: "UnaryExpression",
  operator: operator,
  argument: argument,
};

CompositionExpression left right = {
  type: "CompositionExpression",
  left: left,
  right: right,
};

BinaryExpression operator left right = {
  type: "BinaryExpression",
  operator: operator,
  left: left,
  right: right,
};

MapExpression left right = {
  type: "MapExpression",
  left: left,
  right: right,
};

BindExpression left right = {
  type: "BindExpression",
  left: left,
  right: right,
};

LogicalExpression operator left right = {
  type: "LogicalExpression",
  operator: operator,
  left: left,
  right: right,
};

ConditionalExpression predicate consequent alternative = {
  type: "ConditionalExpression",
  predicate: predicate,
  consequent: consequent,
  alternative: alternative,
};

SwitchExpression discriminant cases default = {
  type: "SwitchExpression",
  discriminant: discriminant,
  cases: cases,
  default: default,
};

SwitchCase predicates consequent = {
  type: "SwitchCase",
  predicates: predicates,
  consequent: consequent,
};

PipeExpression head body = {
  type: "PipeExpression",
  head: head,
  body: body,
};

CallExpression callee args = {
  type: "CallExpression",
  callee: callee,
  arguments: args,
};

ImportExpression source = {
  type: "ImportExpression",
  source: source,
};

ImportDeclaration source specifiers = {
  type: "ImportDeclaration",
  source: source,
  specifiers: specifiers,
};

ImportEverythingDeclaration source hiding = {
  type: "ImportDeclaration",
  source: source,
  specifiers: "*",
  hiding: hiding,
};

ImportDefaultSpecifier local = {
  type: "ImportDefaultSpecifier",
  local: local,
};

ImportSpecifier local imported = {
  type: "ImportSpecifier",
  local: local,
  imported: imported,
};

ImportNamespaceSpecifier local = {
  type: "ImportNamespaceSpecifier",
  local: local,
};

ExportNamedDeclaration specifiers = {
  type: "ExportNamedDeclaration",
  specifiers: specifiers,
};

ExportDefaultDeclaration declaration = {
  type: "ExportDefaultDeclaration",
  declaration: declaration,
};

VariableDeclaration pattern expression = {
  type: "VariableDeclaration",
  pattern: pattern,
  expression: expression,
};

FunctionDeclaration name parameters body = {
  type: "FunctionDeclaration",
  name: name,
  parameters: parameters,
  body: body,
};

ExpressionStatement expression = {
  type: "ExpressionStatement",
  expression: expression,
};

Module {imports, exports, statements} = {
  type: "Module",
  imports: imports,
  exports: exports,
  statements: statements,
};
