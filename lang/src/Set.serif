export {
  from,
  empty,
  of,
  has,
  add,
  sub,
  union,
  without,
  intersection,
};

from           members = construct Set [members];
empty                  = from [];
of         element     = from [element];
has        element set = .has [element] set;
add        element set = union   (of element) set;
sub        element set = without (of element) set;
union        that this = from [...this, ...that];
without      that this = from $ reject (flip has that) $ Array.from this;
intersection that this = from $ filter (flip has that) $ Array.from this;
