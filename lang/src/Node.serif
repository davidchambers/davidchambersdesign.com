export *;

type Node =
  | ArrayExpression elements
  | ArrayPattern elements
  | ArrowAssignmentStatement pattern expression
  | ArrowFunctionExpression parameters body
  | AssignmentExpression operator left right
  | Block statements result
  | BlockStatement statements
  | BooleanLiteral value
  | BreakStatement
  | CallExpression callee arguments
  | CaseClause predicate consequent
  | CaseExpression discriminant cases
  | ConditionalExpression predicate consequent alternative
  | ContinueStatement label
  | DataConstructorDefinition identifier parameters
  | DataConstructorPattern identifier arguments
  | DataTypeDeclaration identifier constructors implementations
  | DoBlockExpression operations result
  | EmptySection operator
  | ExportAllSpecifier hiding
  | ExportDefaultDeclaration declaration
  | ExportNamedDeclaration specifiers
  | ExportSpecifier local exported
  | ExpressionStatement expression
  | ForStatement init test update body
  | FunctionDeclaration identifier parameters body
  | FunctionExpression parameters body
  | GeneratorFunctionDeclaration identifier parameters body
  | Identifier name
  | IfStatement predicate consequent
  | IfElseStatement predicate consequent alternative
  | ImportAllSpecifier hiding
  | ImportDeclaration source specifiers
  | ImportDefaultSpecifier local
  | ImportNamespaceSpecifier local
  | ImportSpecifier imported local
  | InfixCallExpression operator left right
  | InfixExpression operator left right
  | LabeledStatement label body
  | LambdaCaseExpression cases
  | LeftSection operator operand
  | LetDeclaration pattern expression
  | MemberExpression object property
  | MethodCallExpression name
  | Module imports exports statements
  | NumberLiteral value
  | ObjectExpression properties
  | ObjectPattern properties
  | PrefixExpression operator operand
  | Property key value
  | PropertyAccessor identifiers
  | Quasiquotation value
  | RestElement argument
  | ReturnStatement argument
  | RightSection operator operand
  | SpreadElement argument
  | StringLiteral value
  | SwitchCase predicates statements
  | SwitchStatement discriminant cases
  | ThisExpression
  | UpdateExpression prefix? operator argument
  | VariableDeclaration pattern expression
  | WhileStatement test body

implements {
  fantasy-land/equals: \(that) -> {
    this["$tag"] == that["$tag"] && this["$values"] == that["$values"]
  },
}
;
