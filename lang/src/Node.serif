export default Node;
export {
  ArrayExpression,
  ArrayPattern,
  ArrowAssignmentStatement,
  ArrowFunctionExpression,
  BinaryExpression,
  BindExpression,
  BlockExpression,
  BlockStatement,
  BooleanLiteral,
  CallExpression,
  CompositionExpression,
  ConcatenationExpression,
  ConditionalExpression,
  DataTypeDeclaration,
  DoBlockExpression,
  Elision,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  FunctionDeclaration,
  Identifier,
  ImportAllDeclaration,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  InfixCallExpression,
  LogicalExpression,
  MapExpression,
  MemberExpression,
  MethodCallExpression,
  Module,
  NullLiteral,
  NumberLiteral,
  ObjectExpression,
  ObjectPattern,
  PipeExpression,
  Property,
  PropertyAccessor,
  RestElement,
  SpreadElement,
  StringLiteral,
  SwitchCase,
  SwitchExpression,
  TemplateLiteral,
  UnaryExpression,
  VariableDeclaration,
  transform,
};

type Node
  = ArrayExpression elements
  | ArrayPattern elements
  | ArrowAssignmentStatement pattern expression
  | ArrowFunctionExpression parameters body
  | BinaryExpression operator left right
  | BindExpression left right
  | BlockExpression statements result
  | BlockStatement statements
  | BooleanLiteral value
  | CallExpression callee arguments
  | CompositionExpression left right
  | ConcatenationExpression left right
  | ConditionalExpression predicate consequent alternative
  | DataTypeDeclaration name constructors
  | DoBlockExpression operations result
  | Elision
  | ExportDefaultDeclaration declaration
  | ExportNamedDeclaration specifiers
  | ExportSpecifier local exported
  | ExpressionStatement expression
  | FunctionDeclaration name parameters body
  | Identifier name
  | ImportAllDeclaration source default hiding
  | ImportDeclaration source specifiers
  | ImportDefaultSpecifier local
  | ImportNamespaceSpecifier local
  | ImportSpecifier imported local
  | InfixCallExpression operator left right
  | LogicalExpression operator left right
  | MapExpression left right
  | MemberExpression object property
  | MethodCallExpression name
  | Module imports exports statements
  | NullLiteral
  | NumberLiteral value
  | ObjectExpression properties
  | ObjectPattern properties
  | PipeExpression head body
  | Property key value
  | PropertyAccessor identifier
  | RestElement argument
  | SpreadElement argument
  | StringLiteral value
  | SwitchCase predicates consequent
  | SwitchExpression discriminant cases
  | TemplateLiteral quasis expressions
  | UnaryExpression operator argument
  | VariableDeclaration pattern expression
;

{
  ArrayExpression,
  ArrayPattern,
  ArrowAssignmentStatement,
  ArrowFunctionExpression,
  BinaryExpression,
  BindExpression,
  BlockExpression,
  BlockStatement,
  BooleanLiteral,
  CallExpression,
  CompositionExpression,
  ConcatenationExpression,
  ConditionalExpression,
  DataTypeDeclaration,
  DoBlockExpression,
  Elision,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  FunctionDeclaration,
  Identifier,
  ImportAllDeclaration,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  InfixCallExpression,
  LogicalExpression,
  MapExpression,
  MemberExpression,
  MethodCallExpression,
  Module,
  NullLiteral,
  NumberLiteral,
  ObjectExpression,
  ObjectPattern,
  PipeExpression,
  Property,
  PropertyAccessor,
  RestElement,
  SpreadElement,
  StringLiteral,
  SwitchCase,
  SwitchExpression,
  TemplateLiteral,
  UnaryExpression,
  VariableDeclaration,
} = Node;

transform cases = {
  recur node = match Node {
    ArrayExpression: ArrayExpression . map recur,
    ArrayPattern: ArrayPattern . map recur,
    ArrowAssignmentStatement: \pattern expression -> ArrowAssignmentStatement (recur pattern) (recur expression),
    ArrowFunctionExpression: \parameters body -> ArrowFunctionExpression (recur <$> parameters) (recur body),
    BinaryExpression: \operator left right -> BinaryExpression operator (recur left) (recur right),
    BlockExpression: \statements result -> BlockExpression (recur <$> statements) (recur result),
    BlockStatement: BlockStatement . map recur,
    BooleanLiteral: BooleanLiteral,
    BindExpression: \left right -> BindExpression (recur left) (recur right),
    CallExpression: \callee arguments -> CallExpression (recur callee) (recur <$> arguments),
    CompositionExpression: \left right -> CompositionExpression (recur left) (recur right),
    ConcatenationExpression: \left right -> ConcatenationExpression (recur left) (recur right),
    ConditionalExpression: \predicate consequent alternative -> ConditionalExpression (recur predicate) (recur consequent) (recur <$> alternative),
    DataTypeDeclaration: DataTypeDeclaration,
    DoBlockExpression: \operations result -> DoBlockExpression (recur <$> operations) (recur result),
    Elision: Elision,
    ExportDefaultDeclaration: ExportDefaultDeclaration . recur,
    ExportNamedDeclaration: ExportNamedDeclaration . map recur,
    ExportSpecifier: \local exported -> ExportSpecifier (recur local) (recur exported),
    ExpressionStatement: ExpressionStatement . recur,
    FunctionDeclaration: \name parameters body -> FunctionDeclaration name parameters (recur body),
    Identifier: Identifier,
    ImportAllDeclaration: \source default hiding -> ImportAllDeclaration source default (recur <$> hiding),
    ImportDeclaration: \source specifiers -> ImportDeclaration source (recur <$> specifiers),
    ImportDefaultSpecifier: ImportDefaultSpecifier . recur,
    ImportNamespaceSpecifier: ImportNamespaceSpecifier . recur,
    ImportSpecifier: \imported local -> ImportSpecifier (recur imported) (recur local),
    InfixCallExpression: \operator left right -> InfixCallExpression operator (recur left) (recur right),
    LogicalExpression: \operator left right -> LogicalExpression operator (recur left) (recur right),
    MapExpression: \left right -> MapExpression (recur left) (recur right),
    MemberExpression: \object property -> MemberExpression (recur object) (recur property),
    MethodCallExpression: MethodCallExpression,
    Module: \imports exports statements -> Module (recur <$> imports) (recur <$> exports) (recur <$> statements),
    NullLiteral: NullLiteral,
    NumberLiteral: NumberLiteral,
    ObjectExpression: ObjectExpression . map recur,
    ObjectPattern: ObjectPattern . map recur,
    PipeExpression: \head body -> PipeExpression (recur head) (recur body),
    Property: \key value -> Property (recur key) (recur value),
    PropertyAccessor: PropertyAccessor . recur,
    RestElement: RestElement . recur,
    SpreadElement: SpreadElement . recur,
    StringLiteral: StringLiteral,
    SwitchCase: \predicates consequent -> SwitchCase (map recur <$> predicates) (recur consequent),
    SwitchExpression: \discriminant cases -> SwitchExpression (recur discriminant) (recur <$> cases),
    TemplateLiteral: \quasis expressions -> TemplateLiteral quasis (recur <$> expressions),
    UnaryExpression: \operator argument -> UnaryExpression operator (recur argument),
    VariableDeclaration: \pattern expression -> VariableDeclaration (recur pattern) (recur expression),
    ...cases,
  } node;
  recur
};
