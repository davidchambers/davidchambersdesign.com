date: 7 January 2010
time: 10:03pm
zone: Pacific/Auckland
tags: HTML5, JavaScript, Prototype, UX


Auto-populating input fields with Prototype
===========================================

| Yesterday I wrote a simple class which auto-populates
| input fields, and thought it worth sharing. I was originally
| inspired to write this code by Roger Johansson's post titled
| [Autopopulating text input fields with JavaScript][1]. While
| I approached the problem from a slightly different angle,
| I made sure to avoid the pitfalls Roger mentions.
| 
| [1]: http://www.456bereastreet.com/archive/200710/autopopulating_text_input_fields_with_javascript/
| 
| || date: 9 June 2010
| || time: 11:31pm
| || zone: Pacific/Auckland
| || 
| || I've written an update to this article for those interested in
| || [auto-populating input fields with MooTools][2].
| || 
| || [2]: /autopopulating-input-fields-with-mootools/

### Contents ###

* [Behaviour](#behaviour)
* [HTML5 placeholder text](#html5-placeholder-text)
* [Markup](#markup)
* [Styling](#styling)
* [Placeholder class](#placeholder-class)
* [Usage](#usage)

### Behaviour{@id=behaviour}

* Placeholder text should be inserted into input field upon page load.
* Placeholder text should be targetable via CSS.
* Clicking or tabbing into input field should remove placeholder text.
* Placeholder text should be reinserted if input field is empty when it loses
  focus.

### HTML5 placeholder text{@id=html5-placeholder-text}

HTML5 allows placeholder text to be specified in the markup through the
`placeholder` attribute. In supporting browsers (currently Chrome and Safari)
this produces the behaviour described above with no reliance on JavaScript.

### Markup{@id=markup}

    <input type="search" id="s" name="s" placeholder="search..." />

### Styling{@id=styling}

    input.placeholder { color: #a9a9a9 !important; }

I decided to use `#a9a9a9` as Safari uses this colour for placeholder text.

### Placeholder class{@id=placeholder-class}

    var Placeholder = Class.create({
        initialize: function (element) {
            this.element = element;
            this.placeholder = element.readAttribute('placeholder');
            this.blur();
            Event.observe(this.element, 'focus', this.focus.bindAsEventListener(this));
            Event.observe(this.element, 'blur', this.blur.bindAsEventListener(this));
        },
        focus: function () {
            if (this.element.hasClassName('placeholder'))
                this.element.clear().removeClassName('placeholder');
        },
        blur: function () {
            if (this.element.value === '')
                this.element.addClassName('placeholder').value = this.placeholder;
        }
    });

The Placeholder class requires [Prototype][2].

[2]: http://prototypejs.org/

### Usage{@id=usage}

To create a new instance of the Placeholder class, simply pass the constructor
a Prototype extended element:

    new Placeholder($('s'));

Ensure that the DOM is ready by wrapping everything in Prototype's `dom:loaded`
event listener. This also avoids polluting the global namespace.

    document.observe('dom:loaded', function () {
        var Placeholder = Class.create({
            ...
        });
        $$('input[placeholder]').each(function (input) {
            new Placeholder(input);
        });
    });

|| date: 30 March 2010
|| time: 5:17pm
|| zone: Pacific/Auckland
|| 
|| I've updated the selector used in the above example. Selecting all inputs
|| with placeholder attributes is far more elegant than listing each input
|| explicitly. It also means that an input added anywhere on the site will
|| automatically receive this special treatment (provided that it has a
|| placeholder attribute).

**This site's search field shows the code in action.**

|| date: 16 April 2010
|| time: 12:59am
|| zone: Pacific/Auckland
|| 
|| For those that would like placeholder text in _password_ input
|| fields not to appear as dots or asterisks in older browsers, I've
|| written an alternative snippet. I drew inspiration from a post on
|| [iPhone-like password fields using jQuery][1].
|| 
|| [1]: http://blog.decaf.de/2009/07/iphone-like-password-fields-using-jquery/
|| 
||     // provide input hints
||     document.observe('dom:loaded', function () {
||         var PLACEHOLDER_SUFFIX = '_placeholder'; // used for password inputs
||     
||         $$('input[placeholder]').each(function (input) {
||             var label, placeholder,
||                 placeholder_text = input.readAttribute('placeholder');
||     
||             if (input.readAttribute('type') == 'password') {
||                 placeholder = input.clone();
||                 placeholder.type = 'text'; // not "password"
||                 placeholder.value = placeholder_text;
||                 placeholder.addClassName('placeholder');
||     
||                 if (input.id) {
||                     // update input id and label
||                     placeholder.id += PLACEHOLDER_SUFFIX;
||                     label = $$('label[for="' + input.id + '"]')
||                     label.invoke('writeAttribute', 'for', input.id +
||                             PLACEHOLDER_SUFFIX);
||                 }
||     
||                 input.writeAttribute({ 'accesskey': '', 'tabindex': '' });
||                 input.hide().insert({ 'before': placeholder });
||     
||                 // when placeholder input gains focus,
||                 // hide it and show "real" password input
||                 Event.observe(placeholder, 'focus', function () {
||                     this.hide();
||                     input.show();
||                     Form.Element.focus(input);
||                 });
||     
||                 // when "real" password input loses focus,
||                 // if it's empty, hide it and show placeholder input
||                 Event.observe(input, 'blur', function () {
||                     if (this.value === '') {
||                         this.hide();
||                         placeholder.show();
||                     }
||                 });
||             } else {
||                 // insert placeholder text
||                 input.addClassName('placeholder').value = placeholder_text;
||     
||                 Event.observe(input, 'focus', function () {
||                     if (this.hasClassName('placeholder')) {
||                         this.clear().removeClassName('placeholder');
||                     }
||                 });
||                 Event.observe(input, 'blur', function () {
||                     if (this.value === '') {
||                         this.addClassName('placeholder').value = placeholder_text;
||                     }
||                 });
||             }
||         });
||     });
