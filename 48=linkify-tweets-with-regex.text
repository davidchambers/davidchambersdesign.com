date: 10 April 2010
time: 3:22am
zone: Pacific/Auckland
tags: JavaScript, PHP, Python, regex, regular expressions


# Linkify tweets with regex

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

![](/images/posts/decorative/right/at-sign-in-speech-bubble.png)

Regular expressions are powerful, useful, and -- in my opinion -- lots of fun!
Thanks to the prevalence of Twitter, every web developer will be exposed to
regex sooner or later: before outputting tweets in HTML, Twitter names and
hyperlinks must be wrapped in anchor tags.

### Matching @names ###

Here's the gist: a match will begin with "@" and the at sign must be followed
by one or more word (letter / number / underscore) characters. The @name must
either appear at the beginning of the tweet or be preceded by a space. This
prevents the regular expression from matching "@example" in "me@example.com".

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#### JavaScript implementation ####

    :::javascript
    tweet.replace(/(^|\s)(@\w+)/gm, '$1<a href="http://twitter.com/$2">$2</a>');

It would of course be nicer to write:

    :::javascript
    tweet.replace(/(?<=(?:^|\s))(@\w+)/gm, '<a href="http://twitter.com/$1">$1</a>');

Unfortunately, JavaScript does not support lookbehinds in regular expressions,
so one's forced to capture the preceding space character (if in fact there is
one) and spit it out in the replacement string.

#### PHP implementation ####

    preg_replace('/(^|\s)(@\w+)/m', '$1<a href="http://twitter.com/$2">$2</a>', $tweet);

#### Python implementation ####

Python _does_ support lookbehinds, but only _fixed-width_ lookbehinds, so it
won't allow `(?<=^|\s)`. No matter.

    :::python
    import re
    re.sub(r'(?m)(^|\s)(@\w+)',
            lambda m: m.group(1) + '<a href="http://twitter.com/' + m.group(2) + '">' + m.group(2) + '</a>',
            tweet)

For once, Python's syntax is the least elegant!

Interestingly, while testing these snippets I found I did not need to
specify multi-line mode. Perhaps multi-line mode is assumed? I'd like to
know the answer.

### Matching hyperlinks ###

The regular expression involved in matching hyperlinks is more complex. I'll
point you to John Gruber's [liberal regex for matching URLs][1] as he's clearly
put a great deal of thought into what is essentially a single line of code!


[1]: http://daringfireball.net/2009/11/liberal_regex_for_matching_urls
