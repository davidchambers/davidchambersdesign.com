import S from "sanctuary";

export {render ⇦ ⇨ ⇧ ⇩ ← → ↑ ↓};

reducer prev path curr = {
  if curr[0] === :M then {
    if {prev[0] === :M || prev[0] === :m} then {
      [curr, path]  ;; ignore previous move
    } else {
      [curr, [...path, prev]]
    }
  } else {
    if {prev[0] === :M || prev[0] === :m} && curr[0] === :m then {
      [[prev[0], [prev[1][0] + curr[1][0], prev[1][1] + curr[1][1]]], path]
    } else {
      [curr, [...path, prev]]
    }
  }
};

simplify paths = {
  if paths.length === 0 then [] else {
    head = paths[0];
    tail = paths.slice(1);
    pair = S.reduce {pair => curr => reducer pair[0] pair[1] curr} [head, []] tail;
    [...pair[1], pair[0]]
  }
};

render paths = {
  {simplify paths}
  .flat()
  .map(x => if typeof x === "symbol" then Symbol.keyFor x else String x)
  .join(" ")
};

⇦ x = [:m, [-x, 0]];
⇨ x = [:m, [+x, 0]];
⇧ y = [:m, [0, -y]];
⇩ y = [:m, [0, +y]];

← x = [:h, -x];
→ x = [:h, +x];
↑ y = [:v, -y];
↓ y = [:v, +y];
