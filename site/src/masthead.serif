import S from "sanctuary";

import {path} from "./elements.serif";
import * from "./orthogonal.serif";

export default default;
export {fill mask};

wAw = [→ 14, ↓ 24, ←  4, ↑ 10, ←  6, ↓ 10, ←  4, ↑ 24,
       ⇨  4, ⇩  4,
       →  6, ↓  6, ←  6, ↑  6];
wBw = [→ 14, ↓ 24, ← 14, ↑ 24,
       ⇨  4, ⇩  4,
       →  6, ↓  6, ←  6, ↑  6,
       ⇨  0, ⇩ 10,
       →  6, ↓  6, ←  6, ↑  6];
wCw = [→ 14, ↓  9, ←  4, ↑  5, ←  6, ↓ 16, →  6, ↑  5, →  4, ↓  9, ← 14, ↑ 24];
wDw = [→ 14, ↓ 24, ← 14, ↑ 24,
       ⇨  4, ⇩  4,
       →  6, ↓ 16, ←  6, ↑ 16];
wEw = [→ 12, ↓  4, ←  8, ↓  6, →  8, ↓  4, ←  8, ↓  6, →  8, ↓  4, ← 12, ↑ 24];
wGw = [→ 14, ↓  4, ← 10, ↓ 16, →  6, ↑ 10, →  4, ↓ 14, ← 14, ↑ 24];
wHw = [→  4, ↓ 10, →  6, ↑ 10, →  4, ↓ 24, ←  4, ↑ 10, ←  6, ↓ 10, ←  4, ↑ 24];
wIw = [→  4, ↓ 24, ←  4, ↑ 24];
wMw = [→ 22, ↓ 24, ←  4, ↑ 20, ←  5, ↓ 20, ←  4, ↑ 20, ←  5, ↓ 20, ←  4, ↑ 24];
wNw = [→ 14, ↓ 24, ←  4, ↑ 20, ←  6, ↓ 20, ←  4, ↑ 24];
wRw = wAw;
wSw = [→ 12, ↓  4, ←  8, ↓  6, →  8, ↓ 14, ← 12, ↑  4, →  8, ↑  6, ←  8, ↑ 14];
wVw = [→  4, ↓ 20, →  6, ↑ 20, →  4, ↓ 24, ← 14, ↑ 24];

xAx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 10,
       →  6, ↑  6, →  1, ↓  7, ←  7, ↑  1,
       ⇨  6, ⇩  4,
       →  1, ↓ 10, ←  1, ↑ 10];
xBx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 10,
       →  6, ↑  6, →  1, ↓  7, ←  7, ↑  1,
       ⇨  0, ⇩ 10,
       →  6, ↑  6, →  1, ↓  7, ←  7, ↑  1];
xCx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 20,
       →  6, ↑  5, →  4, ↓  1, ←  3, ↓  5, ←  7, ↑  1,
       ⇨  6, ⇧ 16,
       →  1, ↓  5, ←  1, ↑  5];
xDx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 20,
       →  6, ↑ 16, →  1, ↓ 17, ←  7, ↑  1];
xEx = [→ 12, ↓  1, ← 11, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 10,
       →  8, ↓  1, ←  8, ↑  1,
       ⇨  0, ⇩ 10,
       →  8, ↓  1, ←  8, ↑  1];
xGx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 20,
       →  6, ↑ 10, →  4, ↓  1, ←  3, ↓ 10, ←  7, ↑  1];
xHx = [→  4, ↓  1, ←  3, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 10,
       →  6, ↑ 10, →  4, ↓  1, ←  3, ↓ 10, ←  7, ↑  1,
       ⇨  6, ⇩  4,
       →  1, ↓ 10, ←  1, ↑ 10];
xIx = [→  4, ↓  1, ←  3, ↓ 23, ←  1, ↑ 24];
xMx = [→ 22, ↓  1, ← 21, ↓ 23, ←  1, ↑ 23,
       ⇨  9, ⇩  3,
       →  1, ↓ 20, ←  1, ↑ 20,
       ⇨  9, ⇩  0,
       →  1, ↓ 20, ←  1, ↑ 20];
xNx = [→ 14, ↓  1, ← 13, ↓ 23, ←  1, ↑ 24,
       ⇨ 10, ⇩  4,
       →  1, ↓ 20, ←  1, ↑ 20];
xRx = xAx;
xSx = [→ 12, ↓  1, ← 11, ↓ 13, ←  1, ↑ 14,
       ⇨  0, ⇩ 20,
       →  8, ↑  6, →  1, ↓  7, ←  8, ↓  3, ←  1, ↑  4,
       ⇨  4, ⇧ 10,
       →  8, ↓  1, ←  8, ↑  1];
xVx = [→  4, ↓  1, ←  3, ↓ 23, ←  1, ↑ 24,
       ⇨  4, ⇩ 20,
       →  6, ↑ 20, →  4, ↓  1, ←  3, ↓ 20, ←  7, ↑  1];

yAy = [⇨  1, ⇩ 23,
       →  2, ↑ 10, →  8, ↓  1, ←  7, ↓ 10, ←  3, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↓  1, ←  7, ↓  7, ←  1, ↑  8,
       ⇨  8, ⇩ 20,
       →  2, ↑ 22, →  1, ↓ 23, ←  3, ↑  1];
yBy = [⇨  1, ⇩ 23,
       → 12, ↑ 22, →  1, ↓ 23, ← 13, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↓  1, ←  7, ↓  7, ←  1, ↑  8,
       ⇨  0, ⇩ 10,
       →  8, ↓  1, ←  7, ↓  7, ←  1, ↑  8];
yCy = [⇨  1, ⇩ 23,
       → 12, ↑  7, →  1, ↓  8, ← 13, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↓  1, ←  7, ↓ 17, ←  1, ↑ 18,
       ⇨ 10, ⇧  2,
       →  1, ↓  8, ←  3, ↑  1, →  2, ↑  7];
yDy = [⇨  1, ⇩ 23,
       → 12, ↑ 22, →  1, ↓ 23, ← 13, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↓  1, ←  7, ↓ 17, ←  1, ↑ 18];
yEy = [⇨  1, ⇩ 23,
       → 10, ↑  2, →  1, ↓  3, ← 11, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↑  2, →  1, ↓  3, ←  8, ↓  7, ←  1, ↑  8,
       ⇨  0, ⇩ 10,
       →  8, ↑  2, →  1, ↓  3, ←  8, ↓  7, ←  1, ↑  8];
yGy = [⇨  1, ⇩ 23,
       → 12, ↑ 12, →  1, ↓ 13, ← 13, ↑  1,
       ⇨  2, ⇧ 20,
       → 10, ↑  2, →  1, ↓  3, ← 10, ↓ 17, ←  1, ↑ 18];
yHy = [⇨  1, ⇩ 23,
       →  2, ↑ 10, →  8, ↓  1, ←  7, ↓ 10, ←  3, ↑  1,
       ⇨  2, ⇧ 22,
       →  1, ↓ 10, ←  1, ↑ 10,
       ⇨ 10, ⇩  0,
       →  1, ↓ 23, ←  3, ↑  1, →  2, ↑ 22];
yIy = [⇨  1, ⇩ 23,
       →  2, ↑ 22, →  1, ↓ 23, ←  3, ↑  1];
yMy = [⇨  1, ⇩ 23,
       →  2, ↑ 20, →  7, ↓  1, ←  6, ↓ 20, ←  3, ↑  1,
       ⇨  9, ⇩  0,
       →  2, ↑ 20, →  7, ↓  1, ←  6, ↓ 20, ←  3, ↑  1,
       ⇨  9, ⇩  0,
       →  2, ↑ 22, →  1, ↓ 23, ←  3, ↑  1];
yNy = [⇨  1, ⇩ 23,
       →  2, ↑ 20, →  8, ↓  1, ←  7, ↓ 20, ←  3, ↑  1,
       ⇨ 10, ⇩  0,
       →  2, ↑ 22, →  1, ↓ 23, ←  3, ↑  1];
yRy = yAy;
ySy = [⇨  1, ⇩ 13,
       →  8, ↓  1, ←  8, ↑  1,
       ⇨  0, ⇩ 10,
       → 10, ↑ 12, →  1, ↓ 13, ← 11, ↑  1,
       ⇨  2, ⇧ 20,
       →  8, ↑  2, →  1, ↓  3, ←  8, ↓  7, ←  1, ↑  8];
yVy = [⇨  1, ⇩ 23,
       → 12, ↑ 22, →  1, ↓ 23, ← 13, ↑  1,
       ⇨  2, ⇧ 22,
       →  1, ↓ 20, ←  1, ↑ 20];

update positions dir = {
  x = S.fst positions[0];
  y = S.snd positions[0];
  [
    if dir[0] === :h then {
      S.Pair {x + dir[1]} y
    } else if dir[0] === :v then {
      S.Pair x {y + dir[1]}
    } else {
      S.Pair {x + dir[1][0]} {y + dir[1][1]}
    },
    ...positions,
  ]
};

reset path = {
  paths = S.extend S.I {S.reduce update [S.Pair 0 0] path};
  xs = S.chain {S.map S.fst} paths;
  ys = S.chain {S.map S.snd} paths;
  dx = S.reduce S.max 0 xs - xs[0];
  dy = 0 - ys[0];
  [:m, [dx, dy]]
};

paths = S.pipe [
  S.map char => [...char, reset char],
  S.intercalate [[:m, [6, 0]]],
  S.prepend [:M, [0, 0]],
];

wcharsw = paths [wDw, wAw, wVw, wIw, wDw, wCw, wHw, wAw, wMw, wBw, wEw, wRw, wSw, wDw, wEw, wSw, wIw, wGw, wNw];
xcharsx = paths [xDx, xAx, xVx, xIx, xDx, xCx, xHx, xAx, xMx, xBx, xEx, xRx, xSx, xDx, xEx, xSx, xIx, xGx, xNx];
ycharsy = paths [yDy, yAy, yVy, yIy, yDy, yCy, yHy, yAy, yMy, yBy, yEy, yRy, ySy, yDy, yEy, ySy, yIy, yGy, yNy];

mask = [path {d: render wcharsw, fill: "#000", fill-rule: "evenodd"}];
fill = [path {d: render xcharsx, fill: "#999"},
        path {d: render ycharsy, fill: "#666"}];

default = {mask: mask, fill: fill};
