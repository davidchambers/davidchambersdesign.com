export * hiding {
  escape,
  render-attribute,
  render-attributes,
  string-to-text-node,
  block-element,
  inline-element,
  self-closing-element,
};

escape s = {
  s
  & .replaceAll ["&", "&amp;"]
  & .replaceAll ["<", "&lt;"]
  & .replaceAll [">", "&gt;"]
};

text value = {
  type: "text",
  toString: \() -> value,
  render: \context -> escape value,
};

render-attribute [name, value] = {
  value
  & String
  & .trim []
  & .replaceAll ["\n", " "]
  & escape
  & \value -> " " + name + "=\"" + value + "\""  -- TODO: escape double quotes
};

render-attributes attrs = {
  attrs
  & Object.entries
  & map render-attribute
  & joinWith ""
};

string-to-text-node node = {
  if typeof node == "string" then text node else node
};

block-element name attributes children! = {
  children = string-to-text-node <$> children!;
  {
    type: "element",
    format: "block",
    name,
    attributes,
    children,
    toString: \() -> joinWith "" $ String <$> children,
    render: \{indent, level, inline} -> {
      → level = .repeat [level] indent;
      "<" + name + render-attributes attributes + ">"
      + joinWith "" ((\child -> "\n" <> → (level + 1) <> child.render {indent, level: level + 1, inline}) <$> children)
      + "\n" + → level + "</" + name + ">"
    },
  }
};

inline-element name attributes children! = {
  children = string-to-text-node <$> children!;
  format = if .some [\node -> node.format == "block"] children then "inline-block" else "inline";
  {
    type: "element",
    format,
    name,
    attributes,
    children,
    toString: \() -> joinWith "" $ String <$> children,
    render: \{indent, level, inline} -> case format of [
      "inline" -> {
        "<" + name + render-attributes attributes + ">"
        + joinWith "" ((.render [{indent, level, inline}]) <$> children)
        + "</" + name + ">"
      },
      "inline-block" -> {
        → level = .repeat [level] indent;
        render-child indent? child = {
          child.render {indent, level: level + 1, inline}
          & (if indent? then ("\n" <> → (level + 1) <>) else id)
        };
        "<" + name + render-attributes attributes + ">"
        + joinWith "" (
            if children == [] then [] else {
              [head, ...tail] = children;
              [render-child true head] <> (tail <&> \child -> render-child (child.format == "block") child)
            }
          )
        + "\n" + → level + "</" + name + ">"
      },
    ],
  }
};

self-closing-element name attributes = {
  type: "element",
  format: "inline",
  name,
  attributes,
  toString: \() -> "",
  render: \_ -> "<" + name + render-attributes attributes + " />",
};

-- 4.1 The document element
html' = block-element "html";
html = html' {};

-- 4.2 Document metadata
head' = block-element "head";
head = head' {};
title' = inline-element "title";
title = title' {};
base = self-closing-element "base";
link = self-closing-element "link";
meta = self-closing-element "meta";
style' = block-element "style";

-- 4.3 Sections
body' = block-element "body";
body = body' {};
article' = block-element "article";
article = article' {};
section' = block-element "section";
nav' = block-element "nav";
nav = nav' {};
aside' = inline-element "aside";
aside = aside' {};
h1' = inline-element "h1";
h1 = h1' {};
h2' = inline-element "h2";
h2 = h2' {};
h3' = inline-element "h3";
h3 = h3' {};
h4' = inline-element "h4";
h4 = h4' {};
h5' = inline-element "h5";
h5 = h5' {};
h6' = inline-element "h6";
h6 = h6' {};
hgroup' = block-element "hgroup";
header' = block-element "header";
header = header' {};
footer' = block-element "footer";
footer = footer' {};
address' = block-element "address";

-- 4.4 Grouping content
p' = inline-element "p";
p = p' {};
hr' = self-closing-element "hr";
hr = hr' {};
pre' = inline-element "pre";
pre = pre' {};
blockquote' = block-element "blockquote";
blockquote = blockquote' {};
ol' = block-element "ol";
ol = ol' {};
ul' = block-element "ul";
ul = ul' {};
menu' = block-element "menu";
li' = inline-element "li";
li = li' {};
dl' = block-element "dl";
dl = dl' {};
dt' = inline-element "dt";
dt = dt' {};
dd' = inline-element "dd";
dd = dd' {};
figure' = block-element "figure";
figcaption' = block-element "figcaption";
main' = block-element "main";
main = main' {};
div = block-element "div";
table' = block-element "table";
table = table' {};
thead' = block-element "thead";
thead = thead' {};
tbody' = block-element "tbody";
tbody = tbody' {};
tr' = block-element "tr";
tr = tr' {};
th' = inline-element "th";
th = th' {};
td' = inline-element "td";
td = td' {};

b                        = inline-element "b" {};
mask                     = block-element "mask";
rect                     = self-closing-element "rect";
-- The opening and closing tags of each of the following elements
-- are always rendered on their own lines.
linearGradient           = block-element "linearGradient";
object                   = block-element "object";
svg                      = block-element "svg";
-- The opening and closing tags of each of the following elements
-- are rendered inline unless the element contains an element
-- whose opening and closing tags are rendered on their own lines.
a                       = inline-element "a";
code'                   = inline-element "code";
code                    = inline-element "code" {};
del'                    = inline-element "del";
del                     = inline-element "del" {};
em'                     = inline-element "em";
em                      = inline-element "em" {};
i'                      = inline-element "i";
i                       = inline-element "i" {};
ins'                    = inline-element "ins";
ins                     = inline-element "ins" {};
script                  = inline-element "script";
span                    = inline-element "span";
strong'                 = inline-element "strong";
strong                  = inline-element "strong" {};
time                    = inline-element "time";
var'                    = inline-element "var";
var                     = inline-element "var" {};
video                   = inline-element "video";
-- The following self-closing elements are always rendered inline.
embed                   = self-closing-element "embed";
img                     = self-closing-element "img";
param                   = self-closing-element "param";
path                    = self-closing-element "path";
stop                    = self-closing-element "stop";
