import {attemptP, bichain, fork, parallel, resolve} from "fluture";
import sanctuary from "sanctuary";

import posts from "../posts/index.serif";

S = sanctuary.unchecked;

absolute? url = {
  url.startsWith "http:" ||
  url.startsWith "https:"
};

links node = {
  if node.name == "a" then {
    filter absolute? [node.attributes.href]
  } else if node.children == undefined then {
    []
  } else {
    node.children >>= links
  }
};

status url = {
  bichain {\err -> resolve {url: url, status: "XXX"}}
          {\res -> resolve {url: url, status: res.status}}
          {attemptP \() -> fetch (url, {method: "HEAD", redirect: "manual"})}
};

bold   text = "\x1B[1m" + text + "\x1B[22m";
invert text = "\x1B[7m" + text + "\x1B[27m";
red    text = "\x1B[31m" + text + "\x1B[0m";
yellow text = "\x1B[33m" + text + "\x1B[0m";
cyan   text = "\x1B[36m" + text + "\x1B[0m";

format {url, status} = {
  if typeof status == "string"          then red    $ (invert $ bold status) + " " + url
  else if status >= 200 && status < 300 then          (         bold status) + " " + url
  else if status >= 300 && status < 400 then yellow $ (         bold status) + " " + url
  else if status >= 400 && status < 500 then red    $ (         bold status) + " " + url
  else                                       cyan   $ (         bold status) + " " + url
};

program = {
  posts >>= (.body) >>= links
  & Set.new
  & Array.from
  & S.sort
  & map status
  & parallel 16
  & map (joinWith "\n" . map format)
};

fork console.error console.log program;
