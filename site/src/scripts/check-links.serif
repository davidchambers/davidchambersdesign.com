import {attemptP, bichain, fork, parallel, resolve} from "fluture";
import S from "sanctuary";

import posts from "../posts/index.serif";

absolute? url = {
  url.startsWith "http:" or
  url.startsWith "https:"
};

links node = {
  if node.name == "a" then {
    filter absolute? [node.attributes.href]
  } else if node.children == undefined then {
    []
  } else {
    node.children >>= links
  }
};

status url = {
  bichain {\err -> resolve {url: url, status: err.cause.code}}
          {\res -> resolve {url: url, status: res.status}}
          {attemptP \() -> apply fetch [url, {method: "HEAD", redirect: "manual"}]}
};

bold   text = "\x1B[1m" + text + "\x1B[22m";
invert text = "\x1B[7m" + text + "\x1B[27m";
red    text = "\x1B[31m" + text + "\x1B[0m";
yellow text = "\x1B[33m" + text + "\x1B[0m";
cyan   text = "\x1B[36m" + text + "\x1B[0m";

format {url, status} = {
  padding x = " ".repeat $ S.max 0 $ 15 - ((.length) $ String x);
  normal s = s;
  switch true
  when typeof status == "string"      then red    ((padding status) + " " + (invert $ bold status) + " " + url)
  when status >= 200 and status < 300 then        ((padding status) + " " + (normal $ bold status) + " " + url)
  when status >= 300 and status < 400 then yellow ((padding status) + " " + (normal $ bold status) + " " + url)
  when status >= 400 and status < 500 then red    ((padding status) + " " + (normal $ bold status) + " " + url)
  else                                     cyan   ((padding status) + " " + (normal $ bold status) + " " + url)
};

program = {
  construct Set [posts >>= (.body) >>= links]
  % Array.from
  % S.sort
  % map status
  % parallel 16
  % map (.join ["\n"] . map format)
};

fork console.error console.log program;
