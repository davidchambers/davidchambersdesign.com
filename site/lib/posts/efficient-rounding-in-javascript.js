import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  p([
    'So you have some number, ',
    code('x'),
    ', which you want to round\n        to the nearest integer. Easy, right?'
  ]),
  _code$002Dblock(Symbol.for('javascript'))('\n     x = Math.round(x);\n     '),
  p(['Sure, but is this the fastest option? I think not.']),
  _code$002Dblock(Symbol.for('javascript'))('\n     x = x < 0 ? x - 0.5 >> 0 : x + 0.5 >> 0;\n     '),
  p([
    'What the heck\'s going on here? ',
    code('>>'),
    ' is JavaScript\'s\n        right shift operator. It shifts a number\'s binary representation ',
    code('n'),
    ' bits to the right, where ',
    code('n'),
    ' is the\n        value to the right of the operator. Since ',
    code('n'),
    ' is ',
    code('0'),
    ' in this case, no shifting will occur, although ',
    strong('the resulting value will be an integer'),
    '.'
  ]),
  p([
    'Note that this approach results in ',
    code('-82.5'),
    ' being\n        rounded to ',
    code('-83'),
    '.'
  ]),
  p([
    'If, for some reason, your code calls ',
    code('Math.round()'),
    '\n        millions of times, it may be worth investigating the bitwise\n        approach to avoid the overhead of all those function calls.'
  ]),
  p([
    'Stick to ',
    code('Math.round()'),
    ' the rest of the\n        time, though, as it makes for much clearer code. ',
    strong('Never optimize prematurely.')
  ])
];
export default {
  [Symbol.for('id')]: 68,
  [Symbol.for('slug')]: 'efficient-rounding-in-javascript',
  [Symbol.for('title')]: 'Efficient rounding in JavaScript',
  [Symbol.for('datetime')]: datetime('2010-08-31')('22:20:00')(Symbol.for('Pacific/Auckland')),
  [Symbol.for('tags')]: [
    'javascript',
    'optimization',
    'performance'
  ],
  [Symbol.for('body')]: body
};
