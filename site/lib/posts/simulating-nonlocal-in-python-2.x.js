import {h3, h4, p, a, code, em} from "../elements.js";
import {code$002Dblock, $2014} from "../components.js";
import datetime from "../datetime.js";
const excerpt = [p([a({
  href: "http://en.wikipedia.org/wiki/Closure_(computer_science)"
})(["Closure"]), " is truly wonderful. JavaScript", $2014, "despite its ", "plethora of quirks", $2014, "is now widely appreciated, thanks in large ", "part to its lexical scoping. Python 3 is lexically-scoped, too, as ", "the following code demonstrates."]), code$002Dblock("python")("def cache(saved=None):\n    def _(thing=None):\n        nonlocal saved\n        if thing is not None:\n            saved = thing\n        return saved\n    return _\ncache = cache()\n  "), p(["If (the rebound) ", code(["cache"]), " is passed no arguments ", "(or ", code(["None"]), "), ", code(["saved"]), " is returned. ", "Otherwise, ", code(["thing"]), " is assigned to ", code(["saved"]), " ", "and returned."]), code$002Dblock("TK")(">>> cache(2**3)\n8\n>>> cache()\n8\n  "), p(["This works thanks to the ", code(["nonlocal"]), " keyword ", "introduced in Python 3, which enables variables in outer ", "scopes to be rebound. So how would one achieve the same ", "result in earlier versions of Python?"])];
const body = [...excerpt, h3(["Bringing lexical scoping to Python 2.x"]), code$002Dblock("python")("def cache(saved=None):\n    def _(thing=None):\n        # nonlocal saved\n        if thing is not None:\n            saved = thing\n        return saved\n    return _\ncache = cache()\n  "), p(["The ", code(["nonlocal"]), " line is commented out as it's a syntax ", "error in Python 2.x."]), code$002Dblock("TK")(">>> cache(2**3)\n8\n>>> cache()\n...\nUnboundLocalError: local variable 'saved' referenced before assignment\n  "), p(["When ", code(["cache"]), " is passed a (non-", code(["None"]), ") ", code(["thing"]), ", a ", em(["new"]), " ", code(["saved"]), " is ", "created within the local scope. When ", code(["cache"]), " is ", "passed no arguments (or ", code(["None"]), "), execution skips ", "to ", code(["return saved"]), ". At this point, ", code(["saved"]), " ", "is expected to exist within the local scope â€“ it does not, ", "which explains the ", code(["UnboundLocalError"]), "."]), p(["It is possible to simulate lexical scoping in Python 2.x. ", "The approaches I find most palatable utilize a dictionary ", "or a function object as a namespace accessible to both the ", "inner and outer functions."]), h4(["Dictionary"]), code$002Dblock("python")("def cache():\n    ns = {'saved': None}\n    def _(thing=None):\n        if thing is not None:\n            ns['saved'] = thing\n        return ns['saved']\n    return _\ncache = cache()\n  "), h4(["Function object"]), code$002Dblock("python")("def cache():\n    def ns(): pass\n    ns.saved = None\n    def _(thing=None):\n        if thing is not None:\n            ns.saved = thing\n        return ns.saved\n    return _\ncache = cache()\n  "), p(["The dictionary approach is arguably more correct, but subscript ", "notation hurts my eyes so I prefer to stick things on a function ", "object. It's useful that ", code(["def ns(): pass"]), " looks odd, as ", "it alerts the reader to the fact that something ", em(["is"]), " odd."])];
export default {
  id: 78,
  slug: "simulating-nonlocal-in-python-2.x",
  title: ["Simulating ", code(["nonlocal"]), " in Python 2.x"],
  datetime: datetime("2011-02-05 19:30:00 (America/Los_Angeles)"),
  tags: ["hacks", "programming", "python"],
  body
};
