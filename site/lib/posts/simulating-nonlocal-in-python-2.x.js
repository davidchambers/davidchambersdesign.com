import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  excerpt([
    p([
      a('http://en.wikipedia.org/wiki/Closure_(computer_science)')('Closure'),
      ' is truly wonderful. JavaScript -- despite its\n             plethora of quirks -- is now widely appreciated, thanks in large\n             part to its lexical scoping. Python 3 is lexically-scoped, too,\n             as the following code demonstrates.'
    ]),
    _code$002Dblock(Symbol.for('python'))('\n          def cache(saved=None):\n              def _(thing=None):\n                  nonlocal saved\n                  if thing is not None:\n                      saved = thing\n                  return saved\n              return _\n          cache = cache()\n          '),
    p([
      'If (the rebound) ',
      code('cache'),
      ' is passed no arguments\n             (or ',
      code('None'),
      '), ',
      code('saved'),
      ' is returned.\n             Otherwise, ',
      code('thing'),
      ' is assigned to ',
      code('saved'),
      '\n             and returned.'
    ]),
    _code$002Dblock(Symbol.for('TK'))('\n          >>> cache(2**3)\n          8\n          >>> cache()\n          8\n          '),
    p([
      'This works thanks to the ',
      code('nonlocal'),
      ' keyword\n             introduced in Python 3, which enables variables in outer\n             scopes to be rebound. So how would one achieve the same\n             result in earlier versions of Python?'
    ])
  ]),
  h3('Bringing lexical scoping to Python 2.x'),
  _code$002Dblock(Symbol.for('python'))('\n     def cache(saved=None):\n         def _(thing=None):\n             # nonlocal saved\n             if thing is not None:\n                 saved = thing\n             return saved\n         return _\n     cache = cache()\n     '),
  p([
    'The ',
    code('nonlocal'),
    ' line is commented out as it\'s a syntax\n        error in Python 2.x.'
  ]),
  _code$002Dblock(Symbol.for('TK'))('\n     >>> cache(2**3)\n     8\n     >>> cache()\n     ...\n     UnboundLocalError: local variable \'saved\' referenced before assignment\n     '),
  p([
    'When ',
    code('cache'),
    ' is passed a (non-',
    code('None'),
    ') ',
    code('thing'),
    ', a ',
    em('new'),
    ' ',
    code('saved'),
    ' is\n        created within the local scope. When ',
    code('cache'),
    ' is\n        passed no arguments (or ',
    code('None'),
    '), execution skips\n        to ',
    code('return saved'),
    '. At this point, ',
    code('saved'),
    '\n        is expected to exist within the local scope \u2013 it does not,\n        which explains the ',
    code('UnboundLocalError'),
    '.'
  ]),
  p(['It is possible to simulate lexical scoping in Python 2.x.\n        The approaches I find most palatable utilize a dictionary\n        or a function object as a namespace accessible to both the\n        inner and outer functions.']),
  h4('Dictionary'),
  _code$002Dblock(Symbol.for('python'))('\n     def cache():\n         ns = {\'saved\': None}\n         def _(thing=None):\n             if thing is not None:\n                 ns[\'saved\'] = thing\n             return ns[\'saved\']\n         return _\n     cache = cache()\n     '),
  h4('Function object'),
  _code$002Dblock(Symbol.for('python'))('\n     def cache():\n         def ns(): pass\n         ns.saved = None\n         def _(thing=None):\n             if thing is not None:\n                 ns.saved = thing\n             return ns.saved\n         return _\n     cache = cache()\n     '),
  p([
    'The dictionary approach is arguably more correct, but subscript\n        notation hurts my eyes so I prefer to stick things on a function\n        object. It\'s useful that ',
    code('def ns(): pass'),
    ' looks odd, as\n        it alerts the reader to the fact that something ',
    em('is'),
    ' odd.'
  ])
];
export default {
  [Symbol.for('id')]: 78,
  [Symbol.for('slug')]: 'simulating-nonlocal-in-python-2.x',
  [Symbol.for('title')]: [
    'Simulating ',
    code('nonlocal'),
    ' in Python 2.x'
  ],
  [Symbol.for('datetime')]: datetime('2011-02-05')('19:30:00')(Symbol.for('America/Los_Angeles')),
  [Symbol.for('tags')]: [
    'hacks',
    'programming',
    'python'
  ],
  [Symbol.for('body')]: body
};
