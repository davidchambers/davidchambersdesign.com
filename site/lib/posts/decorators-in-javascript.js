import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  p(['A decorator is a function which takes a function and returns\n        a function:']),
  _code$002Dblock(Symbol.for('coffeescript'))('\n     decorator = (fn) -> fn\n     '),
  p([
    'Obviously, this doesn\'t do anything useful. It\'s the fact that a\n        decorator can return a function which behaves ',
    em('similarly'),
    '\n        to the function passed to it that makes the pattern interesting.\n        Commonly a decorator will simply wrap a function invocation in a\n        check of some sort:'
  ]),
  _code$002Dblock(Symbol.for('javascript'))('\n     var loginRequired = function (fn) {\n       return function () {\n         if (!user.authenticated) {\n           return window.location.replace(\'/login\');\n         }\n         fn.apply(null, [].slice.apply(arguments));\n       };\n     };\n     '),
  p(['The above decorator could be used to "guard" actions that only\n        authenticated users are permitted to perform:']),
  _code$002Dblock(Symbol.for('javascript'))('\n     var changeUsername = loginRequired(function (username) {\n       $.ajax({\n         type: \'PUT\',\n         url: \'/api/1.0/users/\' + user.id,\n         data: {username: username}\n       })});\n\n     var changePassword = loginRequired(function (password) {\n       $.ajax({\n         type: \'PUT\',\n         url: \'/api/1.0/users/\' + user.id,\n         data: {password: password}\n       })});\n\n     var deleteAccount = loginRequired(function () {\n       $.ajax({\n         type: \'DELETE\',\n         url: \'/api/1.0/users/\' + user.id\n       })});\n     '),
  p(['The CoffeeScript equivalent is quite a bit clearer:']),
  _code$002Dblock(Symbol.for('coffeescript'))('\n     changeUsername = loginRequired (username) ->\n       $.ajax\n         type: \'PUT\'\n         url: "/api/1.0/users/#{user.id}"\n         data: {username}\n\n     changePassword = loginRequired (password) ->\n       $.ajax\n         type: \'PUT\'\n         url: "/api/1.0/users/#{user.id}"\n         data: {password}\n\n     deleteAccount = loginRequired ->\n       $.ajax\n         type: \'DELETE\'\n         url: "/api/1.0/users/#{user.id}"\n     '),
  p(['Decorators are commonly used in Python -- which provides special\n        syntax for "decorating" functions -- but are rarely seen in\n        JavaScript code. This despite the fact that JavaScript\'s first-class\n        functions are ideally suited to the task. Perhaps CoffeeScript\'s\n        lighter-weight function syntax will result in decorators making\n        more frequent appearances in JavaScript code.'])
];
export default {
  [Symbol.for('id')]: 89,
  [Symbol.for('slug')]: 'decorators-in-javascript',
  [Symbol.for('title')]: 'Decorators in JavaScript',
  [Symbol.for('datetime')]: datetime('2011-07-26')('22:00:00')(Symbol.for('America/Los_Angeles')),
  [Symbol.for('tags')]: [
    'coffeescript',
    'javascript',
    'programming'
  ],
  [Symbol.for('body')]: body
};
