import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  p([
    'While using the ',
    a('http://search.mtg-apps.com/')('MTG card search'),
    '\n        that I\'ve been developing recently, I encountered an error that MySQL\n        reported as follows:'
  ]),
  _code$002Dblock(Symbol.for('plain-text'))('\n     Got error \'repetition-operator operand invalid\' from regexp\n     '),
  p([
    'The problem resulted from an unescaped ',
    strong('{'),
    ' being\n        passed to MySQL\'s REGEXP function. Because this character has a\n        special meaning in regex, it must be escaped when it is being\n        used literally within a string. This is done by preceding it\n        with a backslash (',
    strong('\\'),
    ').'
  ]),
  excerpt([p([
      'Developers will be familiar with using PHP\'s ',
      a('http://php.net/manual/en/function.mysql-real-escape-string.php')('mysql_real_escape_string'),
      '\n             to escape problematic characters before submitting a query.\n             When the query in question involves MySQL\'s REGEXP function,\n             however, we need to go one step further and escape regex\'s\n             special characters.'
    ])]),
  p(['I had a look on php.net to see whether such a function exists.\n        Having failed to find one there, I did a Google search but again\n        came away empty-handed. I wrote my own function for the job, and\n        thought I\'d share it in case others encounter the same problem:']),
  _code$002Dblock(Symbol.for('php'))('\n     <?php\n\n     function mysql_regexp_escape_string($string)\n     {\n         $special_chars = array(\'*\', \'.\', \'?\', \'+\', \'[\', \']\', \'(\', \')\', \'{\', \'}\', \'^\', \'$\', \'|\', \'\\\\\');\n         $replacements = array();\n\n         foreach ($special_chars as $special_char)\n         {\n             $replacements[] = \'\\\\\' . $special_char;\n         }\n\n         return str_replace($special_chars, $replacements, $string);\n     }\n\n     ?>\n     '),
  p(['It is quite possible that a solution to this problem already exists.\n        If this is the case, I am eager to know about it.'])
];
export default {
  [Symbol.for('id')]: 5,
  [Symbol.for('slug')]: 'escape-special-characters-for-sql-regexp',
  [Symbol.for('title')]: 'Escape special characters for SQL REGEXP',
  [Symbol.for('datetime')]: datetime('2009-01-10')('22:21:00')(Symbol.for('Pacific/Auckland')),
  [Symbol.for('tags')]: [
    'php',
    'sql'
  ],
  [Symbol.for('body')]: body
};
