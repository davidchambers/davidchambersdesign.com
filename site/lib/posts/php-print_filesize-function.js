import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  excerpt([
    p([
      'Recently I\'ve been on a drive to eliminate dependencies from my\n             code and other areas, such as blog posts. For those who create\n             content for the Web, a reasonably common task is to provide links\n             to files that can be downloaded. It is considered good practice\n             to include an indication of a file\'s size; for example: ',
      a('/favicon.ico')('favicon.ico'),
      ' (3 KB).'
    ]),
    p([
      'As I was about to hard-code a file\'s size into a blog post\n             recently, I thought to myself: ',
      strong('Will I remember to\n             update this if the file\'s size changes?'),
      ' More importantly,\n             should I be required to remember such things? The answer,\n             of course, is no. I set about writing a function that would\n             allow the file\'s size to be displayed dynamically.'
    ])
  ]),
  _code$002Dblock(Symbol.for('php'))('\n     <?php\n\n     /**\n      * echoes nicely formatted filesize\n      * @param string $filename\n      * @param string $before\n      * @param string $after\n      */\n     function print_filesize($filename, $before = \' <span class="filesize">(\', $after = \')</span>\')\n     {\n         if (file_exists($filename))\n         {\n             $size = filesize($filename);\n             $unit = \'B\';\n\n             if (intval($size/(1024*1024*1024)))\n             {\n                 $size = number_format(($size/(1024*1024*1024)), 1);\n                 $unit = \'GB\';\n             }\n             elseif (intval($size/(1024*1024)))\n             {\n                 $size = number_format(($size/(1024*1024)), 1);\n                 $unit = \'MB\';\n             }\n             elseif (intval($size/1024))\n             {\n                 $size = number_format(($size/1024), 1);\n                 $unit = \'KB\';\n             }\n\n             $approx = $unit == \'B\' ? \'\' : \'\u2248\' ;\n\n             echo "{$before}{$approx}{$size} {$unit}{$after}";\n         }\n     }\n\n     ?>\n     '),
  p(['Example usage:']),
  _code$002Dblock(Symbol.for('php'))('\n     <a href="favicon.ico">favicon.ico</a><?php print_filesize(\'favicon.ico\'); ?>\n     '),
  p([
    'This gives: ',
    a('/favicon.ico')('favicon.ico'),
    ' ',
    span({ [Symbol.for('class')]: 'filesize' })('(\u22481.1 kB)'),
    '. By default, the function\n        wraps the file\'s size in a ',
    code('span'),
    ' element with ',
    code('class="filesize"'),
    ', to provide a hook for styling\n        if required.'
  ])
];
export default {
  [Symbol.for('id')]: 17,
  [Symbol.for('slug')]: 'php-print_filesize-function',
  [Symbol.for('title')]: 'PHP print_filesize function',
  [Symbol.for('datetime')]: datetime('2009-06-10')('21:17:00')(Symbol.for('Pacific/Auckland')),
  [Symbol.for('tags')]: [
    'best-practice',
    'php'
  ],
  [Symbol.for('body')]: body
};
