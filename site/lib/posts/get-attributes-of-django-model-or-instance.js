import {
  _canonicalize$002Dchildren,
  text,
  excerpt,
  a,
  _a$0027,
  article,
  _article$0027,
  aside,
  _aside$0027,
  b,
  blockquote,
  _blockquote$0027,
  _body$0027,
  code,
  _code$0027,
  dd,
  _dd$0027,
  del,
  _del$0027,
  div,
  dl,
  _dl$0027,
  dt,
  _dt$0027,
  em,
  _em$0027,
  embed,
  footer,
  _footer$0027,
  h1,
  _h1$0027,
  h2,
  _h2$0027,
  h3,
  _h3$0027,
  h4,
  _h4$0027,
  h5,
  _h5$0027,
  h6,
  _h6$0027,
  head,
  _head$0027,
  header,
  _header$0027,
  hr,
  _hr$0027,
  html,
  _html$0027,
  i,
  _i$0027,
  img,
  ins,
  _ins$0027,
  li,
  _li$0027,
  linearGradient,
  link,
  mask,
  meta,
  nav,
  _nav$0027,
  object,
  ol,
  _ol$0027,
  p,
  _p$0027,
  param,
  path,
  pre,
  _pre$0027,
  rect,
  script,
  span,
  stop,
  strong,
  _strong$0027,
  svg,
  time,
  title,
  _title$0027,
  ul,
  _ul$0027,
  _var,
  _var$0027,
  video
} from '../elements.js';
import { _code$002Dblock } from '../components.js';
import datetime from '../datetime.js';
const body = [
  p(['What is the best way to get the attributes of a Django model\n        or instance?']),
  _code$002Dblock(Symbol.for('python'))('\n     from django.db import models\n\n     class Musician(models.Model):\n         first_name = models.CharField()\n         last_name  = models.CharField()\n         instrument = models.CharField()\n     '),
  p([
    'One option is to use ',
    code('__dict__.keys()'),
    ':'
  ]),
  _code$002Dblock(Symbol.for('python'))('\n     >>> m = Musician(first_name=\'Norah\', last_name=\'Jones\', instrument=\'piano\')\n     >>> print m.__dict__.keys()\n     [\'last_name\', \'instrument\', \'first_name\', \'id\']\n     '),
  p([
    'Another options is to use ',
    code('_meta.fields'),
    ':'
  ]),
  _code$002Dblock(Symbol.for('python'))('\n     >>> print [f.name for f in m._meta.fields]\n     [\'id\', \'first_name\', \'last_name\', \'instrument\']\n     '),
  p(['This approach also works on models directly:']),
  _code$002Dblock(Symbol.for('python'))('\n     >>> print [f.name for f in Musician._meta.fields]\n     [\'id\', \'first_name\', \'last_name\', \'instrument\']\n     '),
  h3([
    'Advantages of using ',
    code('_meta.fields')
  ]),
  ul([
    li(['items in returned list are correctly ordered']),
    li(['applicable to both models and instances']),
    li([
      'only ',
      em('fields'),
      ' are returned'
    ])
  ]),
  p([
    'The fact that only fields are returned is extremely useful.\n        Django appears to add its own attributes to instances in\n        certain circumstances; using ',
    code('_meta.fields'),
    '\n        prevents these from interfering with one\'s own code.'
  ])
];
export default {
  [Symbol.for('id')]: 38,
  [Symbol.for('slug')]: 'get-attributes-of-django-model-or-instance',
  [Symbol.for('title')]: 'Get attributes of Django model or instance',
  [Symbol.for('datetime')]: datetime('2010-02-22')('20:24:00')(Symbol.for('Pacific/Auckland')),
  [Symbol.for('tags')]: [
    'django',
    'python'
  ],
  [Symbol.for('body')]: body
};
